This research code contains the following:
	crackcount_1.py: the threshold-based machine learning algorithm that was written for
this research.
	train_test.py: The script that runs the prebuilt random forest semantic segmentation
code.
	Model.p: the trained random forest model used in the prebuilt random forest semantic
segmentation code
	Data: contains all of the images used in the code
		Base: folder containing the original outcrop images that are trained and tested on,
labelled from ‘0.jpg’ to ‘9.jpg’. 10 total.
		Trace: folder containing the crack traces/labels for each Base photo, labelled
‘0.jpg’ to ‘9.jpg’. 10 total.
		Output: folder containing the figures generated by crackcount_1.py
	img_seg: folder containing the prebuilt random forest semantic segmentation scripts,
used as modules.
		__init__.py: blank python folder needed to run the other .py files as modules
		train.py: contains the functions used to build the training data and to train the
random forest model. Output is the training and test data, the predictions, and the
model (model.p)
inference.py: used to create prediction images. NOTE: takes days to render a
single image of the same resolution as the Base images
evaluation.py: unused in this script. Part of the random forest code.
How to run the code:
	crackcount_1.py: drop the images and labels you want to use in the ‘Base’ and ‘Trace’ folders located in the ‘Data’ folder. Each photo must have the same dimensions in order for the code to run correctly. Rename each photo to a single number, starting from ‘0’ to ‘n-1’, n being the total number of images. Then, under ‘Parameters’,  change ‘n’ to the total number of images, ‘h’ and ‘w’ to the pixel height and pixel width of the images, ‘sz’ to the size you want to use for the subsampled images. ‘ntot’ should be the total number of subsamples that fits within your original image. This can be calculated by: ‘ntot’ = (‘w’*’h’)/(‘sz’)^2. Then just run the code!
                   NOTE: if you need to rerun the code, you must exit Python and restart it, otherwise you will get a ‘MemoryError’. I could not fix this error no matter what I did, sorry!
                   NOTE: make sure the Base images are RGB and the Trace images are grayscale, and make sure both are in .jpg format.
	train_test.py: Once you have the images you want to use, simply run it. It should work automatically. You could try uncommenting the inference part of the code, but keep in mind that it may have to run for days to get a single output image.
